---------------------
-	OVERHAUL LIST	-
---------------------
1.) UI Overhaul ---PARTIALLY COMPLETE---
	Make everything look nicer and more readable
2.) Save/Load Features
	Self-explanatory
3.) Stratagems and Misc. Fixes ---IN PROGRESS---
	Implement Stratagems properly
	Ensure Faction upgrades work the way they're supposed to
	The fixes on the rest of this list
4.) Custom Subfactions ---COMPLETE---
	Add a new template setup to allow for custom factions
5.) More Game Systems
	The Biggest and Baddest
	Want to provide support for 10th and maybe 8th edition
	along with Horus Heresy and potentially Age of Sigmar (we'll see how the next edition handles list building when the time comes)
		
Provide an error if a datasheet has not selected enough Psychic Powers

Implement the remianing unique stratagems for the following:
	Death Guard
	Necrons
	Adeptus Custodes
	GSC
	Space Marines
	Aeldari
	Harlequins
	Tyranids
	Mechanicus
	T'au
	
Space Marines has limits on what each unit can take depending on subchapter. Most of the time, this isn't a problem. The following have a codex supplement that adds/changes their rosters:
	Black Templars
	Blood Angels
	
Prohibit selecting the same custom faction trait

Space Marines
	Intercessor Sergeant has some wierd options, will have to go back and add restrictions where nessecary
	
Hybrid Metamorphs needs to be visited when the location and sizing rework is ready
	Atalan Jackals

Fix Named Characters? Some named Characters belong to specific subfactions, and technically if they contain a different subfaction keyword than they invalidate the detachment.
	Finish fixing Warlord traits for Necrons

Compare Primaris Lieutenant and Primaris Captain
	They have annoyingly complicated options, so going to need some testing for it

T'au Piranhas hide Seeker Missiles; may want to be looked at
Broadsides have some weapons restrictions
	Fix it
	How to display it?

Riptide template is adequate, but could be better. Take a look?
	Maybe a ListBox control would help

Not super happy with how Nemesis Dreadknights are, maybe a re-look at?
	Also, Dreadknights can't take the same weapon twice, but haven't figured out how to do that yet
	
Blood Angels Assault Squad adds Meltagun and Plasma Gun to the two Assault Marines option in the Wargear options

Lords of Commorragh has relics and warlord traits that only they can have

Need to come back to Drukhari once I figure out how to implement the 
variety of subfactions since Drukhari are just special like that

Need to implement the relics for Drukhari, Deathwatch, Space Wolves

Switching between detachments appears to broken, need to look in on that

Last unit finished: DG Daemon Prince
Characters:
	DG Chaos Lord
	DG Terminator Lord
	DG Daemon Prince
	DG Terminator Sorcerer
	Lord of Contagion
	Lord of Virulence
	Malignant Plaguecaster
	Typhus
	Biologus Putrifier
	Foul Blightspawn
	Noxious Blightbringer
	Plague Surgeon
	Tallyman
Sevenfold Blessings:
	DG Daemon Prince
	DG Terminator Sorcerer
	Malignant Plaguecaster
Champion of Disease:
	Plague Marines
	Blightlord Terminators
	Deathshroud Terminators
Grandfatherly Influence:
	Chaos Spawn
	

			
            factionsRestrictions = repo.restrictedItems;
			
            restrictedIndexes = new List<int>();
            for (int i = 0; i < cmbWarlord.Items.Count; i++)
            {
                if (repo.restrictedItems.Contains(cmbWarlord.Items[i]) && WarlordTrait != cmbWarlord.Items[i].ToString())
                {
                    restrictedIndexes.Add(i);
                }
            }
            this.DrawItemWithRestrictions(restrictedIndexes, cmbWarlord);

            restrictedIndexes = new List<int>();
            for (int i = 0; i < cmbFaction.Items.Count; i++)
            {
                if (repo.restrictedItems.Contains(cmbFaction.Items[i]) && Factionupgrade != cmbFaction.Items[i].ToString())
                {
                    restrictedIndexes.Add(i);
                }
            }
            this.DrawItemWithRestrictions(restrictedIndexes, cmbFaction);
			
			
            restrictedIndexes = new List<int>();
            for (int i = 0; i < cmbRelic.Items.Count; i++)
            {
                if (repo.restrictedItems.Contains(cmbRelic.Items[i]) && Relic != cmbRelic.Items[i].ToString())
                {
                    restrictedIndexes.Add(i);
                }
            }
            this.DrawItemWithRestrictions(restrictedIndexes, cmbRelic);
			
                case 15:
                    if (!factionsRestrictions.Contains(warlord.Text))
                    {
                        if (WarlordTrait == "")
                        {
                            WarlordTrait = warlord.Text;
                            if (WarlordTrait != "")
                            {
                                repo.restrictedItems.Add(WarlordTrait);
                            }
                        }
                        else
                        {
                            repo.restrictedItems.Remove(WarlordTrait);
                            WarlordTrait = warlord.Text;
                            if (WarlordTrait != "")
                            {
                                repo.restrictedItems.Add(WarlordTrait);
                            }
                        }
                    }
                    else
                    {
                        warlord.SelectedIndex = warlord.Items.IndexOf(WarlordTrait);
                    }
                    break;
			
                case 16:
                    if (!factionsRestrictions.Contains(cmbFactionUpgrade.Text))
                    {
                        if (Factionupgrade == "(None)")
                        {
                            Factionupgrade = cmbFactionUpgrade.Text;
                            if (Factionupgrade != "(None)")
                            {
                                repo.restrictedItems.Add(Factionupgrade);
                            }
                        }
                        else
                        {
                            repo.restrictedItems.Remove(Factionupgrade);
                            Factionupgrade = cmbFactionUpgrade.Text;
                            if (Factionupgrade != "(None)")
                            {
                                repo.restrictedItems.Add(Factionupgrade);
                            }
                        }
                    }
                    else
                    {
                        factionud.SelectedIndex = factionud.Items.IndexOf(Factionupgrade);
                    }
                    break;
					
					
                case 17:
                    if (!factionsRestrictions.Contains(cmbRelic.Text))
                    {
                        if (Relic == "(None)")
                        {
                            Relic = cmbRelic.Text == "" ? "(None)" : cmbRelic.Text;
                            if(!repo.hasRelic && Relic != "(None)")
                            {
                                hasFreeRelic = true;
                                repo.hasRelic = true;
                            }

                            if (Relic != "(None)")
                            {
                                repo.restrictedItems.Add(Relic);
                            }
                        }
                        else
                        {
                            repo.restrictedItems.Remove(Relic);
                            Relic = cmbRelic.Text;
                            if (Relic != "(None)")
                            {
                                repo.restrictedItems.Add(Relic);
                            }
                            else
                            {
                                if(repo.hasRelic && hasFreeRelic)
                                {
                                    hasFreeRelic = false;
                                    repo.hasRelic = false;
                                }
                            }
                        }
                    }
                    else
                    {
                        cmbRelic.SelectedIndex = cmbRelic.Items.IndexOf(Relic);
                        cmbRelic.Enabled = true;
                    }
                    break;
					
                case 25:
                    if (cbWarlord.Checked)
                    {
                        this.isWarlord = true;
                        repo.hasWarlord = true;
                    }
                    else { this.isWarlord = false; repo.hasWarlord = false; warlord.SelectedIndex = -1; }
                    break;
					
					
	
            if (repo.hasWarlord && !isWarlord)
            {
                cbWarlord.Enabled = false;
            }
            else
            {
                cmbWarlord.Items.Clear();
                List<string> traits = repo.GetWarlordTraits("");
                foreach (var item in traits)
                {
                    cmbWarlord.Items.Add(item);
                }
            }
			
            if (isWarlord)
            {
                cbWarlord.Checked = true;
                cmbWarlord.Enabled = true;
                cmbWarlord.SelectedIndex = cmbWarlord.Items.IndexOf(WarlordTrait);
            }
            else
            {
                cbWarlord.Checked = false;
                cmbWarlord.Enabled = false;
            }
			
            if (repo.hasRelic && Relic == "(None)")
            {
                cmbRelic.Enabled = false;
                cmbRelic.SelectedIndex = -1;
            }
            else
            {
                cmbRelic.Enabled = true;
                cmbRelic.Items.Clear();
                cmbRelic.Items.AddRange(repo.GetRelics(Keywords).ToArray());

                if (Relic != null)
                {
                    cmbRelic.SelectedIndex = cmbRelic.Items.IndexOf(Relic);
                }
                else
                {
                    cmbRelic.SelectedIndex = -1;
                }
            }